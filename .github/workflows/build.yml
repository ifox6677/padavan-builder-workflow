name: Build firmware

on:
  workflow_dispatch:
  push:
    tags:
      - '*'

jobs:
  build:
    runs-on: ubuntu-latest
    container: registry.gitlab.com/hadzhioglu/padavan-ng
    defaults: { run: { shell: bash } }

    env:
      TOOLCHAIN_PATH: /toolchain  # 工具链的路径
      STAGE_PATH: /stage/mipsel    # 依赖库的安装路径
      CMAKE_TOOLCHAIN_FILE: $TOOLCHAIN_PATH/cross-mipsel-linux.cmake  # 工具链文件路径

    steps:
    - uses: actions/checkout@v4

    - name: Download cross-compilation toolchain
      run: |
        mkdir -p $TOOLCHAIN_PATH
        wget -qO- http://url-to-your-toolchain.tar.gz | tar -xz -C $TOOLCHAIN_PATH

    - name: Check toolchain file
      run: |
        echo "Checking for toolchain file at $CMAKE_TOOLCHAIN_FILE"
        if [ -f $CMAKE_TOOLCHAIN_FILE ]; then
          echo "Toolchain file found!"
        else
          echo "Error: Toolchain file not found!"
          exit 1
        fi

    - name: Install build dependencies
      run: |
        apt-get update
        apt-get install -y build-essential cmake git wget libssl-dev zlib1g-dev

    - name: Build Libuv
      run: |
        set -e
        wget https://dist.libuv.org/dist/v1.42.0/libuv-v1.42.0.tar.gz
        tar -zxvf libuv-v1.42.0.tar.gz
        cd libuv-v1.42.0
        mkdir build && cd build
        cmake .. \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_INSTALL_PREFIX=$STAGE_PATH \
          -DCMAKE_TOOLCHAIN_FILE=$CMAKE_TOOLCHAIN_FILE \
          -DBUILD_SHARED_LIBS=OFF
        make -j$(nproc) VERBOSE=1
        make install
        cd ../../
        rm -rf libuv-v1.42.0

    # 新增步骤：构建 ttyd
    - name: Download ttyd
      run: |
        wget -qO- https://github.com/tsl0922/ttyd/archive/1.6.2.tar.gz | tar -xz -C /tmp
        cd /tmp/ttyd-1.6.2
        mkdir build && cd build
        cmake .. \
          -DCMAKE_TOOLCHAIN_FILE=$CMAKE_TOOLCHAIN_FILE \
          -DCMAKE_BUILD_TYPE=Release
        make -j$(nproc)
        make install  # 可选：如果您想要安装

    - name: Build firmware
      run: |
        cp build.config padavan-ng/trunk/.config
        pushd padavan-ng/trunk
        ./clear_tree.sh
        ./build_firmware.sh
        popd

    - name: Prepare artifacts
      run: |
        FW_FILE_NAME="$(find padavan-ng/trunk/images -type f -regextype posix-extended -iregex ".*\.(trx|bin)$" \
                        -printf "%T@\t%f\n" | sort -V | tail -1 | cut -f2)"
        cp "padavan-ng/trunk/images/$FW_FILE_NAME" .
        echo "FW_FILE_NAME=$FW_FILE_NAME" >> $GITHUB_ENV
        echo "BUILD_TIMESTAMP=$(date '+%Y.%m.%d_%H.%M.%S')" >> $GITHUB_ENV

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: padavan-ng_${{ env.CONFIG_VENDOR }}_${{ env.CONFIG_FIRMWARE_PRODUCT_ID }}_${{ env.BUILD_TIMESTAMP }}
        retention-days: 7
        path: |
          ${{ env.FW_FILE_NAME }}
          build.config

    - name: Check firmware size
      run: |
        partitions=padavan-ng/trunk/configs/boards/$CONFIG_VENDOR/$CONFIG_FIRMWARE_PRODUCT_ID/partitions.config
        max_fw_size="$(awk '/Firmware/ { getline; getline; sub(",", ""); print strtonum($2); }' "$partitions")"
        fw_size="$(stat -c %s "$FW_FILE_NAME")"

        if ((fw_size > max_fw_size)); then
          fw_size_fmtd="$(numfmt --grouping "$fw_size") bytes"
          max_fw_size_fmtd="$(numfmt --grouping "$max_fw_size") bytes"
          echo "Firmware size ($fw_size_fmtd) exceeds max size ($max_fw_size_fmtd) for your target device"
          exit 1
        fi
