name: Build firmware

on:
  workflow_dispatch:
  push:
    tags:
      - '*'

jobs:
  build:
    runs-on: ubuntu-latest
    defaults: { run: { shell: bash } }
    steps:
      - uses: actions/checkout@v4

      - name: 设置依赖项
        run: |
          # 更新包列表
          sudo apt-get update

          # 安装必要的软件包，包括 libmbedtls-dev
          sudo apt-get install -y autoconf autoconf-archive automake autopoint bison build-essential ca-certificates cmake cpio curl dos2unix doxygen fakeroot flex gawk gettext git gperf help2man htop kmod libarchive-tools libblkid-dev libc-ares-dev libcurl4-openssl-dev libdevmapper-dev libev-dev libevent-dev libexif-dev libflac-dev libgmp3-dev libid3tag0-dev libidn2-dev libjpeg-dev libkeyutils-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libogg-dev libsqlite3-dev libssl-dev libtool libtool-bin libudev-dev libunbound-dev libvorbis-dev libxml2-dev locales mc nano pkg-config ppp-dev python3 python3-docutils sshpass texinfo unzip uuid uuid-dev vim wget xxd zlib1g-dev libmbedtls-dev

      - name: 安装 Go 语言
        run: |
          wget https://golang.org/dl/go1.23.0.linux-amd64.tar.gz  # 请根据需要选择 Go 的版本
          sudo tar -C /usr/local -xzf go1.23.0.linux-amd64.tar.gz
          echo 'export PATH=$PATH:/usr/local/go/bin' >> $GITHUB_ENV

      - name: 获取变量
        run: |
          sed -i 's|\r$||g' variables build.config
          . <(cat variables build.config)
          PADAVAN_THEMES="${PADAVAN_THEMES[*]}"
          for v in "${!PADAVAN_@}" "${!CONFIG_@}"; do
            echo "$v=${!v}" >> $GITHUB_ENV
          done

      - name: 下载源代码和工具链
        run: |
          git config --global --add safe.directory '*'
          git clone -b "$PADAVAN_BRANCH" "$PADAVAN_REPO"
          git -C padavan-ng checkout "$PADAVAN_COMMIT"
          wget -qO- "$PADAVAN_TOOLCHAIN_URL" | tar -C padavan-ng --zstd -xf -

      - name: 复制本地目录文件
        run: |
          # 复制 adduser 目录下的所有文件到 trunk/user 目录
          cp -r adduser/* padavan/trunk/user/

          # 验证是否复制成功
          if [[ $(ls -A padavan/trunk/user/) ]]; then
            echo "文件复制成功！"
          else
            echo "文件复制失败！"
            exit 1
          fi
      - name: 复制科学目录文件RR
        run: |
          # 复制 adduser 目录下的所有文件到 trunk/user 目录
          cp -r userinfo/* padavan/trunk/libs/

          # 验证是否复制成功
          if [[ $(ls -A padavan/trunk/libs/) ]]; then
            echo "文件复制成功！"
          else
            echo "文件复制失败！"
            exit 1
          fi		  
      
          # 记录 padavan-ng/trunk/user/ 目录中的所有文件到日志
          echo "记录 padavan-ng/trunk/user/ 目录中的所有文件："
          ls -R padavan/trunk/user/ | tee copied_files.log

      # 可选：将 copied_files.log 作为工件上传以供后续参考
      - name: 上传文件复制日志
        uses: actions/upload-artifact@v4
        with:
          name: copied-files-log
          path: copied_files.log

      - name: 运行自定义预构建脚本
        run: '[[ -f pre-build.sh ]] && . pre-build.sh || :'

      - name: 构建固件
        run: |
          cp build.config padavan/trunk/.config
          pushd padavan/trunk
          ./clear_tree.sh
          ./build_firmware.sh
          popd

      - name: 运行自定义后构建脚本
        run: '[[ -f post-build.sh ]] && . post-build.sh || :'

      - name: 准备构件
        run: |
          FW_FILE_NAME="$(find padavan/trunk/images -type f -regextype posix-extended -iregex ".*\.(trx|bin)$" \
                          -printf "%T@\t%f\n" | sort -V | tail -1 | cut -f2)"
          cp "padavan/trunk/images/$FW_FILE_NAME" .
          echo "FW_FILE_NAME=$FW_FILE_NAME" >> $GITHUB_ENV
          echo "BUILD_TIMESTAMP=$(date '+%Y.%m.%d_%H.%M.%S')" >> $GITHUB_ENV

      - name: 上传构件
        uses: actions/upload-artifact@v4
        with:
          name: padavan_${{ env.CONFIG_VENDOR }}_${{ env.CONFIG_FIRMWARE_PRODUCT_ID }}_${{ env.BUILD_TIMESTAMP }}
          retention-days: 7
          path: |
            ${{ env.FW_FILE_NAME }}
            build.config


         
            exit 1
        
